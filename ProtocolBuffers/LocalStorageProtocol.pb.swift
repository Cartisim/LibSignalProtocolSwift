// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: LocalStorageProtocol.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Textsecure_SessionStructure: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SessionStructure"

  var sessionVersion: UInt32 {
    get {return _storage._sessionVersion ?? 0}
    set {_uniqueStorage()._sessionVersion = newValue}
  }
  /// Returns true if `sessionVersion` has been explicitly set.
  var hasSessionVersion: Bool {return _storage._sessionVersion != nil}
  /// Clears the value of `sessionVersion`. Subsequent reads from it will return its default value.
  mutating func clearSessionVersion() {_storage._sessionVersion = nil}

  var localIdentityPublic: Data {
    get {return _storage._localIdentityPublic ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._localIdentityPublic = newValue}
  }
  /// Returns true if `localIdentityPublic` has been explicitly set.
  var hasLocalIdentityPublic: Bool {return _storage._localIdentityPublic != nil}
  /// Clears the value of `localIdentityPublic`. Subsequent reads from it will return its default value.
  mutating func clearLocalIdentityPublic() {_storage._localIdentityPublic = nil}

  var remoteIdentityPublic: Data {
    get {return _storage._remoteIdentityPublic ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._remoteIdentityPublic = newValue}
  }
  /// Returns true if `remoteIdentityPublic` has been explicitly set.
  var hasRemoteIdentityPublic: Bool {return _storage._remoteIdentityPublic != nil}
  /// Clears the value of `remoteIdentityPublic`. Subsequent reads from it will return its default value.
  mutating func clearRemoteIdentityPublic() {_storage._remoteIdentityPublic = nil}

  var rootKey: Data {
    get {return _storage._rootKey ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._rootKey = newValue}
  }
  /// Returns true if `rootKey` has been explicitly set.
  var hasRootKey: Bool {return _storage._rootKey != nil}
  /// Clears the value of `rootKey`. Subsequent reads from it will return its default value.
  mutating func clearRootKey() {_storage._rootKey = nil}

  var previousCounter: UInt32 {
    get {return _storage._previousCounter ?? 0}
    set {_uniqueStorage()._previousCounter = newValue}
  }
  /// Returns true if `previousCounter` has been explicitly set.
  var hasPreviousCounter: Bool {return _storage._previousCounter != nil}
  /// Clears the value of `previousCounter`. Subsequent reads from it will return its default value.
  mutating func clearPreviousCounter() {_storage._previousCounter = nil}

  var senderChain: Textsecure_SessionStructure.Chain {
    get {return _storage._senderChain ?? Textsecure_SessionStructure.Chain()}
    set {_uniqueStorage()._senderChain = newValue}
  }
  /// Returns true if `senderChain` has been explicitly set.
  var hasSenderChain: Bool {return _storage._senderChain != nil}
  /// Clears the value of `senderChain`. Subsequent reads from it will return its default value.
  mutating func clearSenderChain() {_storage._senderChain = nil}

  var receiverChains: [Textsecure_SessionStructure.Chain] {
    get {return _storage._receiverChains}
    set {_uniqueStorage()._receiverChains = newValue}
  }

  var pendingKeyExchange: Textsecure_SessionStructure.PendingKeyExchange {
    get {return _storage._pendingKeyExchange ?? Textsecure_SessionStructure.PendingKeyExchange()}
    set {_uniqueStorage()._pendingKeyExchange = newValue}
  }
  /// Returns true if `pendingKeyExchange` has been explicitly set.
  var hasPendingKeyExchange: Bool {return _storage._pendingKeyExchange != nil}
  /// Clears the value of `pendingKeyExchange`. Subsequent reads from it will return its default value.
  mutating func clearPendingKeyExchange() {_storage._pendingKeyExchange = nil}

  var pendingPreKey: Textsecure_SessionStructure.PendingPreKey {
    get {return _storage._pendingPreKey ?? Textsecure_SessionStructure.PendingPreKey()}
    set {_uniqueStorage()._pendingPreKey = newValue}
  }
  /// Returns true if `pendingPreKey` has been explicitly set.
  var hasPendingPreKey: Bool {return _storage._pendingPreKey != nil}
  /// Clears the value of `pendingPreKey`. Subsequent reads from it will return its default value.
  mutating func clearPendingPreKey() {_storage._pendingPreKey = nil}

  var remoteRegistrationID: UInt32 {
    get {return _storage._remoteRegistrationID ?? 0}
    set {_uniqueStorage()._remoteRegistrationID = newValue}
  }
  /// Returns true if `remoteRegistrationID` has been explicitly set.
  var hasRemoteRegistrationID: Bool {return _storage._remoteRegistrationID != nil}
  /// Clears the value of `remoteRegistrationID`. Subsequent reads from it will return its default value.
  mutating func clearRemoteRegistrationID() {_storage._remoteRegistrationID = nil}

  var localRegistrationID: UInt32 {
    get {return _storage._localRegistrationID ?? 0}
    set {_uniqueStorage()._localRegistrationID = newValue}
  }
  /// Returns true if `localRegistrationID` has been explicitly set.
  var hasLocalRegistrationID: Bool {return _storage._localRegistrationID != nil}
  /// Clears the value of `localRegistrationID`. Subsequent reads from it will return its default value.
  mutating func clearLocalRegistrationID() {_storage._localRegistrationID = nil}

  var needsRefresh: Bool {
    get {return _storage._needsRefresh ?? false}
    set {_uniqueStorage()._needsRefresh = newValue}
  }
  /// Returns true if `needsRefresh` has been explicitly set.
  var hasNeedsRefresh: Bool {return _storage._needsRefresh != nil}
  /// Clears the value of `needsRefresh`. Subsequent reads from it will return its default value.
  mutating func clearNeedsRefresh() {_storage._needsRefresh = nil}

  var aliceBaseKey: Data {
    get {return _storage._aliceBaseKey ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._aliceBaseKey = newValue}
  }
  /// Returns true if `aliceBaseKey` has been explicitly set.
  var hasAliceBaseKey: Bool {return _storage._aliceBaseKey != nil}
  /// Clears the value of `aliceBaseKey`. Subsequent reads from it will return its default value.
  mutating func clearAliceBaseKey() {_storage._aliceBaseKey = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Chain: SwiftProtobuf.Message {
    static let protoMessageName: String = Textsecure_SessionStructure.protoMessageName + ".Chain"

    var senderRatchetKey: Data {
      get {return _storage._senderRatchetKey ?? SwiftProtobuf.Internal.emptyData}
      set {_uniqueStorage()._senderRatchetKey = newValue}
    }
    /// Returns true if `senderRatchetKey` has been explicitly set.
    var hasSenderRatchetKey: Bool {return _storage._senderRatchetKey != nil}
    /// Clears the value of `senderRatchetKey`. Subsequent reads from it will return its default value.
    mutating func clearSenderRatchetKey() {_storage._senderRatchetKey = nil}

    var senderRatchetKeyPrivate: Data {
      get {return _storage._senderRatchetKeyPrivate ?? SwiftProtobuf.Internal.emptyData}
      set {_uniqueStorage()._senderRatchetKeyPrivate = newValue}
    }
    /// Returns true if `senderRatchetKeyPrivate` has been explicitly set.
    var hasSenderRatchetKeyPrivate: Bool {return _storage._senderRatchetKeyPrivate != nil}
    /// Clears the value of `senderRatchetKeyPrivate`. Subsequent reads from it will return its default value.
    mutating func clearSenderRatchetKeyPrivate() {_storage._senderRatchetKeyPrivate = nil}

    var chainKey: Textsecure_SessionStructure.Chain.ChainKey {
      get {return _storage._chainKey ?? Textsecure_SessionStructure.Chain.ChainKey()}
      set {_uniqueStorage()._chainKey = newValue}
    }
    /// Returns true if `chainKey` has been explicitly set.
    var hasChainKey: Bool {return _storage._chainKey != nil}
    /// Clears the value of `chainKey`. Subsequent reads from it will return its default value.
    mutating func clearChainKey() {_storage._chainKey = nil}

    var messageKeys: [Textsecure_SessionStructure.Chain.MessageKey] {
      get {return _storage._messageKeys}
      set {_uniqueStorage()._messageKeys = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct ChainKey: SwiftProtobuf.Message {
      static let protoMessageName: String = Textsecure_SessionStructure.Chain.protoMessageName + ".ChainKey"

      var index: UInt32 {
        get {return _index ?? 0}
        set {_index = newValue}
      }
      /// Returns true if `index` has been explicitly set.
      var hasIndex: Bool {return self._index != nil}
      /// Clears the value of `index`. Subsequent reads from it will return its default value.
      mutating func clearIndex() {self._index = nil}

      var key: Data {
        get {return _key ?? SwiftProtobuf.Internal.emptyData}
        set {_key = newValue}
      }
      /// Returns true if `key` has been explicitly set.
      var hasKey: Bool {return self._key != nil}
      /// Clears the value of `key`. Subsequent reads from it will return its default value.
      mutating func clearKey() {self._key = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      /// Used by the decoding initializers in the SwiftProtobuf library, not generally
      /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
      /// initializers are defined in the SwiftProtobuf library. See the Message and
      /// Message+*Additions` files.
      mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularUInt32Field(value: &self._index)
          case 2: try decoder.decodeSingularBytesField(value: &self._key)
          default: break
          }
        }
      }

      /// Used by the encoding methods of the SwiftProtobuf library, not generally
      /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
      /// other serializer methods are defined in the SwiftProtobuf library. See the
      /// `Message` and `Message+*Additions` files.
      func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if let v = self._index {
          try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
        }
        if let v = self._key {
          try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
      }

      fileprivate var _index: UInt32? = nil
      fileprivate var _key: Data? = nil
    }

    struct MessageKey: SwiftProtobuf.Message {
      static let protoMessageName: String = Textsecure_SessionStructure.Chain.protoMessageName + ".MessageKey"

      var index: UInt32 {
        get {return _index ?? 0}
        set {_index = newValue}
      }
      /// Returns true if `index` has been explicitly set.
      var hasIndex: Bool {return self._index != nil}
      /// Clears the value of `index`. Subsequent reads from it will return its default value.
      mutating func clearIndex() {self._index = nil}

      var cipherKey: Data {
        get {return _cipherKey ?? SwiftProtobuf.Internal.emptyData}
        set {_cipherKey = newValue}
      }
      /// Returns true if `cipherKey` has been explicitly set.
      var hasCipherKey: Bool {return self._cipherKey != nil}
      /// Clears the value of `cipherKey`. Subsequent reads from it will return its default value.
      mutating func clearCipherKey() {self._cipherKey = nil}

      var macKey: Data {
        get {return _macKey ?? SwiftProtobuf.Internal.emptyData}
        set {_macKey = newValue}
      }
      /// Returns true if `macKey` has been explicitly set.
      var hasMacKey: Bool {return self._macKey != nil}
      /// Clears the value of `macKey`. Subsequent reads from it will return its default value.
      mutating func clearMacKey() {self._macKey = nil}

      var iv: Data {
        get {return _iv ?? SwiftProtobuf.Internal.emptyData}
        set {_iv = newValue}
      }
      /// Returns true if `iv` has been explicitly set.
      var hasIv: Bool {return self._iv != nil}
      /// Clears the value of `iv`. Subsequent reads from it will return its default value.
      mutating func clearIv() {self._iv = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      /// Used by the decoding initializers in the SwiftProtobuf library, not generally
      /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
      /// initializers are defined in the SwiftProtobuf library. See the Message and
      /// Message+*Additions` files.
      mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularUInt32Field(value: &self._index)
          case 2: try decoder.decodeSingularBytesField(value: &self._cipherKey)
          case 3: try decoder.decodeSingularBytesField(value: &self._macKey)
          case 4: try decoder.decodeSingularBytesField(value: &self._iv)
          default: break
          }
        }
      }

      /// Used by the encoding methods of the SwiftProtobuf library, not generally
      /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
      /// other serializer methods are defined in the SwiftProtobuf library. See the
      /// `Message` and `Message+*Additions` files.
      func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if let v = self._index {
          try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
        }
        if let v = self._cipherKey {
          try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
        }
        if let v = self._macKey {
          try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
        }
        if let v = self._iv {
          try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
      }

      fileprivate var _index: UInt32? = nil
      fileprivate var _cipherKey: Data? = nil
      fileprivate var _macKey: Data? = nil
      fileprivate var _iv: Data? = nil
    }

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularBytesField(value: &_storage._senderRatchetKey)
          case 2: try decoder.decodeSingularBytesField(value: &_storage._senderRatchetKeyPrivate)
          case 3: try decoder.decodeSingularMessageField(value: &_storage._chainKey)
          case 4: try decoder.decodeRepeatedMessageField(value: &_storage._messageKeys)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._senderRatchetKey {
          try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
        }
        if let v = _storage._senderRatchetKeyPrivate {
          try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
        }
        if let v = _storage._chainKey {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
        if !_storage._messageKeys.isEmpty {
          try visitor.visitRepeatedMessageField(value: _storage._messageKeys, fieldNumber: 4)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct PendingKeyExchange: SwiftProtobuf.Message {
    static let protoMessageName: String = Textsecure_SessionStructure.protoMessageName + ".PendingKeyExchange"

    var sequence: UInt32 {
      get {return _sequence ?? 0}
      set {_sequence = newValue}
    }
    /// Returns true if `sequence` has been explicitly set.
    var hasSequence: Bool {return self._sequence != nil}
    /// Clears the value of `sequence`. Subsequent reads from it will return its default value.
    mutating func clearSequence() {self._sequence = nil}

    var localBaseKey: Data {
      get {return _localBaseKey ?? SwiftProtobuf.Internal.emptyData}
      set {_localBaseKey = newValue}
    }
    /// Returns true if `localBaseKey` has been explicitly set.
    var hasLocalBaseKey: Bool {return self._localBaseKey != nil}
    /// Clears the value of `localBaseKey`. Subsequent reads from it will return its default value.
    mutating func clearLocalBaseKey() {self._localBaseKey = nil}

    var localBaseKeyPrivate: Data {
      get {return _localBaseKeyPrivate ?? SwiftProtobuf.Internal.emptyData}
      set {_localBaseKeyPrivate = newValue}
    }
    /// Returns true if `localBaseKeyPrivate` has been explicitly set.
    var hasLocalBaseKeyPrivate: Bool {return self._localBaseKeyPrivate != nil}
    /// Clears the value of `localBaseKeyPrivate`. Subsequent reads from it will return its default value.
    mutating func clearLocalBaseKeyPrivate() {self._localBaseKeyPrivate = nil}

    var localRatchetKey: Data {
      get {return _localRatchetKey ?? SwiftProtobuf.Internal.emptyData}
      set {_localRatchetKey = newValue}
    }
    /// Returns true if `localRatchetKey` has been explicitly set.
    var hasLocalRatchetKey: Bool {return self._localRatchetKey != nil}
    /// Clears the value of `localRatchetKey`. Subsequent reads from it will return its default value.
    mutating func clearLocalRatchetKey() {self._localRatchetKey = nil}

    var localRatchetKeyPrivate: Data {
      get {return _localRatchetKeyPrivate ?? SwiftProtobuf.Internal.emptyData}
      set {_localRatchetKeyPrivate = newValue}
    }
    /// Returns true if `localRatchetKeyPrivate` has been explicitly set.
    var hasLocalRatchetKeyPrivate: Bool {return self._localRatchetKeyPrivate != nil}
    /// Clears the value of `localRatchetKeyPrivate`. Subsequent reads from it will return its default value.
    mutating func clearLocalRatchetKeyPrivate() {self._localRatchetKeyPrivate = nil}

    var localIdentityKey: Data {
      get {return _localIdentityKey ?? SwiftProtobuf.Internal.emptyData}
      set {_localIdentityKey = newValue}
    }
    /// Returns true if `localIdentityKey` has been explicitly set.
    var hasLocalIdentityKey: Bool {return self._localIdentityKey != nil}
    /// Clears the value of `localIdentityKey`. Subsequent reads from it will return its default value.
    mutating func clearLocalIdentityKey() {self._localIdentityKey = nil}

    var localIdentityKeyPrivate: Data {
      get {return _localIdentityKeyPrivate ?? SwiftProtobuf.Internal.emptyData}
      set {_localIdentityKeyPrivate = newValue}
    }
    /// Returns true if `localIdentityKeyPrivate` has been explicitly set.
    var hasLocalIdentityKeyPrivate: Bool {return self._localIdentityKeyPrivate != nil}
    /// Clears the value of `localIdentityKeyPrivate`. Subsequent reads from it will return its default value.
    mutating func clearLocalIdentityKeyPrivate() {self._localIdentityKeyPrivate = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &self._sequence)
        case 2: try decoder.decodeSingularBytesField(value: &self._localBaseKey)
        case 3: try decoder.decodeSingularBytesField(value: &self._localBaseKeyPrivate)
        case 4: try decoder.decodeSingularBytesField(value: &self._localRatchetKey)
        case 5: try decoder.decodeSingularBytesField(value: &self._localRatchetKeyPrivate)
        case 7: try decoder.decodeSingularBytesField(value: &self._localIdentityKey)
        case 8: try decoder.decodeSingularBytesField(value: &self._localIdentityKeyPrivate)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._sequence {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      }
      if let v = self._localBaseKey {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
      }
      if let v = self._localBaseKeyPrivate {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
      }
      if let v = self._localRatchetKey {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
      }
      if let v = self._localRatchetKeyPrivate {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
      }
      if let v = self._localIdentityKey {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 7)
      }
      if let v = self._localIdentityKeyPrivate {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 8)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _sequence: UInt32? = nil
    fileprivate var _localBaseKey: Data? = nil
    fileprivate var _localBaseKeyPrivate: Data? = nil
    fileprivate var _localRatchetKey: Data? = nil
    fileprivate var _localRatchetKeyPrivate: Data? = nil
    fileprivate var _localIdentityKey: Data? = nil
    fileprivate var _localIdentityKeyPrivate: Data? = nil
  }

  struct PendingPreKey: SwiftProtobuf.Message {
    static let protoMessageName: String = Textsecure_SessionStructure.protoMessageName + ".PendingPreKey"

    var preKeyID: UInt32 {
      get {return _preKeyID ?? 0}
      set {_preKeyID = newValue}
    }
    /// Returns true if `preKeyID` has been explicitly set.
    var hasPreKeyID: Bool {return self._preKeyID != nil}
    /// Clears the value of `preKeyID`. Subsequent reads from it will return its default value.
    mutating func clearPreKeyID() {self._preKeyID = nil}

    var signedPreKeyID: Int32 {
      get {return _signedPreKeyID ?? 0}
      set {_signedPreKeyID = newValue}
    }
    /// Returns true if `signedPreKeyID` has been explicitly set.
    var hasSignedPreKeyID: Bool {return self._signedPreKeyID != nil}
    /// Clears the value of `signedPreKeyID`. Subsequent reads from it will return its default value.
    mutating func clearSignedPreKeyID() {self._signedPreKeyID = nil}

    var baseKey: Data {
      get {return _baseKey ?? SwiftProtobuf.Internal.emptyData}
      set {_baseKey = newValue}
    }
    /// Returns true if `baseKey` has been explicitly set.
    var hasBaseKey: Bool {return self._baseKey != nil}
    /// Clears the value of `baseKey`. Subsequent reads from it will return its default value.
    mutating func clearBaseKey() {self._baseKey = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &self._preKeyID)
        case 2: try decoder.decodeSingularBytesField(value: &self._baseKey)
        case 3: try decoder.decodeSingularInt32Field(value: &self._signedPreKeyID)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._preKeyID {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      }
      if let v = self._baseKey {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
      }
      if let v = self._signedPreKeyID {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _preKeyID: UInt32? = nil
    fileprivate var _signedPreKeyID: Int32? = nil
    fileprivate var _baseKey: Data? = nil
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._sessionVersion)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._localIdentityPublic)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._remoteIdentityPublic)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._rootKey)
        case 5: try decoder.decodeSingularUInt32Field(value: &_storage._previousCounter)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._senderChain)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._receiverChains)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._pendingKeyExchange)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._pendingPreKey)
        case 10: try decoder.decodeSingularUInt32Field(value: &_storage._remoteRegistrationID)
        case 11: try decoder.decodeSingularUInt32Field(value: &_storage._localRegistrationID)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._needsRefresh)
        case 13: try decoder.decodeSingularBytesField(value: &_storage._aliceBaseKey)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._sessionVersion {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._localIdentityPublic {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
      }
      if let v = _storage._remoteIdentityPublic {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
      }
      if let v = _storage._rootKey {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
      }
      if let v = _storage._previousCounter {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._senderChain {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._receiverChains.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._receiverChains, fieldNumber: 7)
      }
      if let v = _storage._pendingKeyExchange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._pendingPreKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._remoteRegistrationID {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._localRegistrationID {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
      }
      if let v = _storage._needsRefresh {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      }
      if let v = _storage._aliceBaseKey {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Textsecure_RecordStructure: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RecordStructure"

  var currentSession: Textsecure_SessionStructure {
    get {return _storage._currentSession ?? Textsecure_SessionStructure()}
    set {_uniqueStorage()._currentSession = newValue}
  }
  /// Returns true if `currentSession` has been explicitly set.
  var hasCurrentSession: Bool {return _storage._currentSession != nil}
  /// Clears the value of `currentSession`. Subsequent reads from it will return its default value.
  mutating func clearCurrentSession() {_storage._currentSession = nil}

  var previousSessions: [Textsecure_SessionStructure] {
    get {return _storage._previousSessions}
    set {_uniqueStorage()._previousSessions = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._currentSession)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._previousSessions)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._currentSession {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._previousSessions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._previousSessions, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Textsecure_PreKeyRecordStructure: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PreKeyRecordStructure"

  var id: UInt32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var publicKey: Data {
    get {return _publicKey ?? SwiftProtobuf.Internal.emptyData}
    set {_publicKey = newValue}
  }
  /// Returns true if `publicKey` has been explicitly set.
  var hasPublicKey: Bool {return self._publicKey != nil}
  /// Clears the value of `publicKey`. Subsequent reads from it will return its default value.
  mutating func clearPublicKey() {self._publicKey = nil}

  var privateKey: Data {
    get {return _privateKey ?? SwiftProtobuf.Internal.emptyData}
    set {_privateKey = newValue}
  }
  /// Returns true if `privateKey` has been explicitly set.
  var hasPrivateKey: Bool {return self._privateKey != nil}
  /// Clears the value of `privateKey`. Subsequent reads from it will return its default value.
  mutating func clearPrivateKey() {self._privateKey = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._id)
      case 2: try decoder.decodeSingularBytesField(value: &self._publicKey)
      case 3: try decoder.decodeSingularBytesField(value: &self._privateKey)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._publicKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    if let v = self._privateKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _id: UInt32? = nil
  fileprivate var _publicKey: Data? = nil
  fileprivate var _privateKey: Data? = nil
}

struct Textsecure_SignedPreKeyRecordStructure: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SignedPreKeyRecordStructure"

  var id: UInt32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var publicKey: Data {
    get {return _publicKey ?? SwiftProtobuf.Internal.emptyData}
    set {_publicKey = newValue}
  }
  /// Returns true if `publicKey` has been explicitly set.
  var hasPublicKey: Bool {return self._publicKey != nil}
  /// Clears the value of `publicKey`. Subsequent reads from it will return its default value.
  mutating func clearPublicKey() {self._publicKey = nil}

  var privateKey: Data {
    get {return _privateKey ?? SwiftProtobuf.Internal.emptyData}
    set {_privateKey = newValue}
  }
  /// Returns true if `privateKey` has been explicitly set.
  var hasPrivateKey: Bool {return self._privateKey != nil}
  /// Clears the value of `privateKey`. Subsequent reads from it will return its default value.
  mutating func clearPrivateKey() {self._privateKey = nil}

  var signature: Data {
    get {return _signature ?? SwiftProtobuf.Internal.emptyData}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  mutating func clearSignature() {self._signature = nil}

  var timestamp: UInt64 {
    get {return _timestamp ?? 0}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._id)
      case 2: try decoder.decodeSingularBytesField(value: &self._publicKey)
      case 3: try decoder.decodeSingularBytesField(value: &self._privateKey)
      case 4: try decoder.decodeSingularBytesField(value: &self._signature)
      case 5: try decoder.decodeSingularFixed64Field(value: &self._timestamp)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._publicKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    if let v = self._privateKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    if let v = self._signature {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    }
    if let v = self._timestamp {
      try visitor.visitSingularFixed64Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _id: UInt32? = nil
  fileprivate var _publicKey: Data? = nil
  fileprivate var _privateKey: Data? = nil
  fileprivate var _signature: Data? = nil
  fileprivate var _timestamp: UInt64? = nil
}

struct Textsecure_IdentityKeyPairStructure: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".IdentityKeyPairStructure"

  var publicKey: Data {
    get {return _publicKey ?? SwiftProtobuf.Internal.emptyData}
    set {_publicKey = newValue}
  }
  /// Returns true if `publicKey` has been explicitly set.
  var hasPublicKey: Bool {return self._publicKey != nil}
  /// Clears the value of `publicKey`. Subsequent reads from it will return its default value.
  mutating func clearPublicKey() {self._publicKey = nil}

  var privateKey: Data {
    get {return _privateKey ?? SwiftProtobuf.Internal.emptyData}
    set {_privateKey = newValue}
  }
  /// Returns true if `privateKey` has been explicitly set.
  var hasPrivateKey: Bool {return self._privateKey != nil}
  /// Clears the value of `privateKey`. Subsequent reads from it will return its default value.
  mutating func clearPrivateKey() {self._privateKey = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._publicKey)
      case 2: try decoder.decodeSingularBytesField(value: &self._privateKey)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._publicKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._privateKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _publicKey: Data? = nil
  fileprivate var _privateKey: Data? = nil
}

struct Textsecure_SenderKeyStateStructure: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SenderKeyStateStructure"

  var senderKeyID: UInt32 {
    get {return _storage._senderKeyID ?? 0}
    set {_uniqueStorage()._senderKeyID = newValue}
  }
  /// Returns true if `senderKeyID` has been explicitly set.
  var hasSenderKeyID: Bool {return _storage._senderKeyID != nil}
  /// Clears the value of `senderKeyID`. Subsequent reads from it will return its default value.
  mutating func clearSenderKeyID() {_storage._senderKeyID = nil}

  var senderChainKey: Textsecure_SenderKeyStateStructure.SenderChainKey {
    get {return _storage._senderChainKey ?? Textsecure_SenderKeyStateStructure.SenderChainKey()}
    set {_uniqueStorage()._senderChainKey = newValue}
  }
  /// Returns true if `senderChainKey` has been explicitly set.
  var hasSenderChainKey: Bool {return _storage._senderChainKey != nil}
  /// Clears the value of `senderChainKey`. Subsequent reads from it will return its default value.
  mutating func clearSenderChainKey() {_storage._senderChainKey = nil}

  var senderSigningKey: Textsecure_SenderKeyStateStructure.SenderSigningKey {
    get {return _storage._senderSigningKey ?? Textsecure_SenderKeyStateStructure.SenderSigningKey()}
    set {_uniqueStorage()._senderSigningKey = newValue}
  }
  /// Returns true if `senderSigningKey` has been explicitly set.
  var hasSenderSigningKey: Bool {return _storage._senderSigningKey != nil}
  /// Clears the value of `senderSigningKey`. Subsequent reads from it will return its default value.
  mutating func clearSenderSigningKey() {_storage._senderSigningKey = nil}

  var senderMessageKeys: [Textsecure_SenderKeyStateStructure.SenderMessageKey] {
    get {return _storage._senderMessageKeys}
    set {_uniqueStorage()._senderMessageKeys = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct SenderChainKey: SwiftProtobuf.Message {
    static let protoMessageName: String = Textsecure_SenderKeyStateStructure.protoMessageName + ".SenderChainKey"

    var iteration: UInt32 {
      get {return _iteration ?? 0}
      set {_iteration = newValue}
    }
    /// Returns true if `iteration` has been explicitly set.
    var hasIteration: Bool {return self._iteration != nil}
    /// Clears the value of `iteration`. Subsequent reads from it will return its default value.
    mutating func clearIteration() {self._iteration = nil}

    var seed: Data {
      get {return _seed ?? SwiftProtobuf.Internal.emptyData}
      set {_seed = newValue}
    }
    /// Returns true if `seed` has been explicitly set.
    var hasSeed: Bool {return self._seed != nil}
    /// Clears the value of `seed`. Subsequent reads from it will return its default value.
    mutating func clearSeed() {self._seed = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &self._iteration)
        case 2: try decoder.decodeSingularBytesField(value: &self._seed)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._iteration {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      }
      if let v = self._seed {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _iteration: UInt32? = nil
    fileprivate var _seed: Data? = nil
  }

  struct SenderMessageKey: SwiftProtobuf.Message {
    static let protoMessageName: String = Textsecure_SenderKeyStateStructure.protoMessageName + ".SenderMessageKey"

    var iteration: UInt32 {
      get {return _iteration ?? 0}
      set {_iteration = newValue}
    }
    /// Returns true if `iteration` has been explicitly set.
    var hasIteration: Bool {return self._iteration != nil}
    /// Clears the value of `iteration`. Subsequent reads from it will return its default value.
    mutating func clearIteration() {self._iteration = nil}

    var seed: Data {
      get {return _seed ?? SwiftProtobuf.Internal.emptyData}
      set {_seed = newValue}
    }
    /// Returns true if `seed` has been explicitly set.
    var hasSeed: Bool {return self._seed != nil}
    /// Clears the value of `seed`. Subsequent reads from it will return its default value.
    mutating func clearSeed() {self._seed = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &self._iteration)
        case 2: try decoder.decodeSingularBytesField(value: &self._seed)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._iteration {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      }
      if let v = self._seed {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _iteration: UInt32? = nil
    fileprivate var _seed: Data? = nil
  }

  struct SenderSigningKey: SwiftProtobuf.Message {
    static let protoMessageName: String = Textsecure_SenderKeyStateStructure.protoMessageName + ".SenderSigningKey"

    var `public`: Data {
      get {return _public ?? SwiftProtobuf.Internal.emptyData}
      set {_public = newValue}
    }
    /// Returns true if ``public`` has been explicitly set.
    var hasPublic: Bool {return self._public != nil}
    /// Clears the value of ``public``. Subsequent reads from it will return its default value.
    mutating func clearPublic() {self._public = nil}

    var `private`: Data {
      get {return _private ?? SwiftProtobuf.Internal.emptyData}
      set {_private = newValue}
    }
    /// Returns true if ``private`` has been explicitly set.
    var hasPrivate: Bool {return self._private != nil}
    /// Clears the value of ``private``. Subsequent reads from it will return its default value.
    mutating func clearPrivate() {self._private = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &self._public)
        case 2: try decoder.decodeSingularBytesField(value: &self._private)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._public {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
      }
      if let v = self._private {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _public: Data? = nil
    fileprivate var _private: Data? = nil
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._senderKeyID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._senderChainKey)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._senderSigningKey)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._senderMessageKeys)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._senderKeyID {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._senderChainKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._senderSigningKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._senderMessageKeys.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._senderMessageKeys, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Textsecure_SenderKeyRecordStructure: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".SenderKeyRecordStructure"

  var senderKeyStates: [Textsecure_SenderKeyStateStructure] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.senderKeyStates)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.senderKeyStates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.senderKeyStates, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "textsecure"

extension Textsecure_SessionStructure: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sessionVersion"),
    2: .same(proto: "localIdentityPublic"),
    3: .same(proto: "remoteIdentityPublic"),
    4: .same(proto: "rootKey"),
    5: .same(proto: "previousCounter"),
    6: .same(proto: "senderChain"),
    7: .same(proto: "receiverChains"),
    8: .same(proto: "pendingKeyExchange"),
    9: .same(proto: "pendingPreKey"),
    10: .same(proto: "remoteRegistrationId"),
    11: .same(proto: "localRegistrationId"),
    12: .same(proto: "needsRefresh"),
    13: .same(proto: "aliceBaseKey"),
  ]

  fileprivate class _StorageClass {
    var _sessionVersion: UInt32? = nil
    var _localIdentityPublic: Data? = nil
    var _remoteIdentityPublic: Data? = nil
    var _rootKey: Data? = nil
    var _previousCounter: UInt32? = nil
    var _senderChain: Textsecure_SessionStructure.Chain? = nil
    var _receiverChains: [Textsecure_SessionStructure.Chain] = []
    var _pendingKeyExchange: Textsecure_SessionStructure.PendingKeyExchange? = nil
    var _pendingPreKey: Textsecure_SessionStructure.PendingPreKey? = nil
    var _remoteRegistrationID: UInt32? = nil
    var _localRegistrationID: UInt32? = nil
    var _needsRefresh: Bool? = nil
    var _aliceBaseKey: Data? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sessionVersion = source._sessionVersion
      _localIdentityPublic = source._localIdentityPublic
      _remoteIdentityPublic = source._remoteIdentityPublic
      _rootKey = source._rootKey
      _previousCounter = source._previousCounter
      _senderChain = source._senderChain
      _receiverChains = source._receiverChains
      _pendingKeyExchange = source._pendingKeyExchange
      _pendingPreKey = source._pendingPreKey
      _remoteRegistrationID = source._remoteRegistrationID
      _localRegistrationID = source._localRegistrationID
      _needsRefresh = source._needsRefresh
      _aliceBaseKey = source._aliceBaseKey
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Textsecure_SessionStructure) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._sessionVersion != other_storage._sessionVersion {return false}
        if _storage._localIdentityPublic != other_storage._localIdentityPublic {return false}
        if _storage._remoteIdentityPublic != other_storage._remoteIdentityPublic {return false}
        if _storage._rootKey != other_storage._rootKey {return false}
        if _storage._previousCounter != other_storage._previousCounter {return false}
        if _storage._senderChain != other_storage._senderChain {return false}
        if _storage._receiverChains != other_storage._receiverChains {return false}
        if _storage._pendingKeyExchange != other_storage._pendingKeyExchange {return false}
        if _storage._pendingPreKey != other_storage._pendingPreKey {return false}
        if _storage._remoteRegistrationID != other_storage._remoteRegistrationID {return false}
        if _storage._localRegistrationID != other_storage._localRegistrationID {return false}
        if _storage._needsRefresh != other_storage._needsRefresh {return false}
        if _storage._aliceBaseKey != other_storage._aliceBaseKey {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Textsecure_SessionStructure.Chain: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "senderRatchetKey"),
    2: .same(proto: "senderRatchetKeyPrivate"),
    3: .same(proto: "chainKey"),
    4: .same(proto: "messageKeys"),
  ]

  fileprivate class _StorageClass {
    var _senderRatchetKey: Data? = nil
    var _senderRatchetKeyPrivate: Data? = nil
    var _chainKey: Textsecure_SessionStructure.Chain.ChainKey? = nil
    var _messageKeys: [Textsecure_SessionStructure.Chain.MessageKey] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _senderRatchetKey = source._senderRatchetKey
      _senderRatchetKeyPrivate = source._senderRatchetKeyPrivate
      _chainKey = source._chainKey
      _messageKeys = source._messageKeys
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Textsecure_SessionStructure.Chain) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._senderRatchetKey != other_storage._senderRatchetKey {return false}
        if _storage._senderRatchetKeyPrivate != other_storage._senderRatchetKeyPrivate {return false}
        if _storage._chainKey != other_storage._chainKey {return false}
        if _storage._messageKeys != other_storage._messageKeys {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Textsecure_SessionStructure.Chain.ChainKey: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "key"),
  ]

  func _protobuf_generated_isEqualTo(other: Textsecure_SessionStructure.Chain.ChainKey) -> Bool {
    if self._index != other._index {return false}
    if self._key != other._key {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Textsecure_SessionStructure.Chain.MessageKey: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "cipherKey"),
    3: .same(proto: "macKey"),
    4: .same(proto: "iv"),
  ]

  func _protobuf_generated_isEqualTo(other: Textsecure_SessionStructure.Chain.MessageKey) -> Bool {
    if self._index != other._index {return false}
    if self._cipherKey != other._cipherKey {return false}
    if self._macKey != other._macKey {return false}
    if self._iv != other._iv {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Textsecure_SessionStructure.PendingKeyExchange: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sequence"),
    2: .same(proto: "localBaseKey"),
    3: .same(proto: "localBaseKeyPrivate"),
    4: .same(proto: "localRatchetKey"),
    5: .same(proto: "localRatchetKeyPrivate"),
    7: .same(proto: "localIdentityKey"),
    8: .same(proto: "localIdentityKeyPrivate"),
  ]

  func _protobuf_generated_isEqualTo(other: Textsecure_SessionStructure.PendingKeyExchange) -> Bool {
    if self._sequence != other._sequence {return false}
    if self._localBaseKey != other._localBaseKey {return false}
    if self._localBaseKeyPrivate != other._localBaseKeyPrivate {return false}
    if self._localRatchetKey != other._localRatchetKey {return false}
    if self._localRatchetKeyPrivate != other._localRatchetKeyPrivate {return false}
    if self._localIdentityKey != other._localIdentityKey {return false}
    if self._localIdentityKeyPrivate != other._localIdentityKeyPrivate {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Textsecure_SessionStructure.PendingPreKey: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "preKeyId"),
    3: .same(proto: "signedPreKeyId"),
    2: .same(proto: "baseKey"),
  ]

  func _protobuf_generated_isEqualTo(other: Textsecure_SessionStructure.PendingPreKey) -> Bool {
    if self._preKeyID != other._preKeyID {return false}
    if self._signedPreKeyID != other._signedPreKeyID {return false}
    if self._baseKey != other._baseKey {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Textsecure_RecordStructure: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "currentSession"),
    2: .same(proto: "previousSessions"),
  ]

  fileprivate class _StorageClass {
    var _currentSession: Textsecure_SessionStructure? = nil
    var _previousSessions: [Textsecure_SessionStructure] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _currentSession = source._currentSession
      _previousSessions = source._previousSessions
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Textsecure_RecordStructure) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._currentSession != other_storage._currentSession {return false}
        if _storage._previousSessions != other_storage._previousSessions {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Textsecure_PreKeyRecordStructure: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "publicKey"),
    3: .same(proto: "privateKey"),
  ]

  func _protobuf_generated_isEqualTo(other: Textsecure_PreKeyRecordStructure) -> Bool {
    if self._id != other._id {return false}
    if self._publicKey != other._publicKey {return false}
    if self._privateKey != other._privateKey {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Textsecure_SignedPreKeyRecordStructure: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "publicKey"),
    3: .same(proto: "privateKey"),
    4: .same(proto: "signature"),
    5: .same(proto: "timestamp"),
  ]

  func _protobuf_generated_isEqualTo(other: Textsecure_SignedPreKeyRecordStructure) -> Bool {
    if self._id != other._id {return false}
    if self._publicKey != other._publicKey {return false}
    if self._privateKey != other._privateKey {return false}
    if self._signature != other._signature {return false}
    if self._timestamp != other._timestamp {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Textsecure_IdentityKeyPairStructure: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "publicKey"),
    2: .same(proto: "privateKey"),
  ]

  func _protobuf_generated_isEqualTo(other: Textsecure_IdentityKeyPairStructure) -> Bool {
    if self._publicKey != other._publicKey {return false}
    if self._privateKey != other._privateKey {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Textsecure_SenderKeyStateStructure: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "senderKeyId"),
    2: .same(proto: "senderChainKey"),
    3: .same(proto: "senderSigningKey"),
    4: .same(proto: "senderMessageKeys"),
  ]

  fileprivate class _StorageClass {
    var _senderKeyID: UInt32? = nil
    var _senderChainKey: Textsecure_SenderKeyStateStructure.SenderChainKey? = nil
    var _senderSigningKey: Textsecure_SenderKeyStateStructure.SenderSigningKey? = nil
    var _senderMessageKeys: [Textsecure_SenderKeyStateStructure.SenderMessageKey] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _senderKeyID = source._senderKeyID
      _senderChainKey = source._senderChainKey
      _senderSigningKey = source._senderSigningKey
      _senderMessageKeys = source._senderMessageKeys
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Textsecure_SenderKeyStateStructure) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._senderKeyID != other_storage._senderKeyID {return false}
        if _storage._senderChainKey != other_storage._senderChainKey {return false}
        if _storage._senderSigningKey != other_storage._senderSigningKey {return false}
        if _storage._senderMessageKeys != other_storage._senderMessageKeys {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Textsecure_SenderKeyStateStructure.SenderChainKey: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "iteration"),
    2: .same(proto: "seed"),
  ]

  func _protobuf_generated_isEqualTo(other: Textsecure_SenderKeyStateStructure.SenderChainKey) -> Bool {
    if self._iteration != other._iteration {return false}
    if self._seed != other._seed {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Textsecure_SenderKeyStateStructure.SenderMessageKey: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "iteration"),
    2: .same(proto: "seed"),
  ]

  func _protobuf_generated_isEqualTo(other: Textsecure_SenderKeyStateStructure.SenderMessageKey) -> Bool {
    if self._iteration != other._iteration {return false}
    if self._seed != other._seed {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Textsecure_SenderKeyStateStructure.SenderSigningKey: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "public"),
    2: .same(proto: "private"),
  ]

  func _protobuf_generated_isEqualTo(other: Textsecure_SenderKeyStateStructure.SenderSigningKey) -> Bool {
    if self._public != other._public {return false}
    if self._private != other._private {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Textsecure_SenderKeyRecordStructure: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "senderKeyStates"),
  ]

  func _protobuf_generated_isEqualTo(other: Textsecure_SenderKeyRecordStructure) -> Bool {
    if self.senderKeyStates != other.senderKeyStates {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
